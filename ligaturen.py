# -*- coding: utf-8 -*-
import re
import codecs

ligaturen = []
inf = open('ligaturliste', 'r')
for line in inf.readlines():
    parts = re.split(' *# *', line.strip())
    if len(parts) == 2:
        ligaturen.append(parts)
inf.close()

print 'found %i ligature cases' % (len(ligaturen))

#escaoing backslashed
def posix(regexpr):
    regexpr = re.sub(r'\\', r'\\\\' , regexpr)
    return regexpr


#individual GREP rules
header = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<Query>\n  <Header>\n    <Version major="5" minor="1"></Version>\n    <Application value="Adobe InDesign"></Application>\n    <QueryType value="Grep" qid="1"></QueryType>\n  </Header>\n  <Description>\n'
footer = '    <FindChangeOptions>\n      <IncludeLockedLayers value="0"></IncludeLockedLayers>\n      <IncludeLockedStories value="0"></IncludeLockedStories>\n      <IncludeMasterPages value="0"></IncludeMasterPages>\n      <IncludeHiddenLayers value="0"></IncludeHiddenLayers>\n      <IncludeFootnotes value="1"></IncludeFootnotes>\n      <KanaSensitive value="1"></KanaSensitive>\n      <WidthSensitive value="1"></WidthSensitive>\n    </FindChangeOptions>\n    <FindFormatSettings></FindFormatSettings>\n    <ReplaceFormatSettings>\n      <TextAttribute cls_id="6913" value="C=75 M=5 Y=100 K=0"></TextAttribute>\n      <TextAttribute type="changecondmode" value="0"></TextAttribute>\n    </ReplaceFormatSettings>\n  </Description>\n</Query>\n'

i = 0
for lig in []:
#for lig in ligaturen:
    i += 1
    ouf = codecs.EncodedFile(codecs.open('grep_ligatures_%03i.xml' % (i), mode='wb'),'utf8')
    ouf.write(header)
    ouf.write('    <FindExpression value="%s"></FindExpression>\n' % (lig[0]))
    ouf.write('    <ReplaceExpression value="%s"></ReplaceExpression>\n' % (lig[1]))
    ouf.write(footer)
    ouf.close()

#Chained Script
header = '//This script was generated by ligaturen.py by phlorian\n//with the help of chainGREP.jsx by Gregor Fellenz \n\n'
header += "main();\n\nfunction main() {\n	if (app.layoutWindows.length == 0) return;\n	var changeObject = app.documents[0];\n	if (changeObject.hasOwnProperty('characters') && changeObject.characters.length == 0) return;\n	var doc = app.documents[0];\n	var style;\n	var scriptVersion = app.scriptPreferences.version;\n	app.scriptPreferences.version = 15.0;\n	var options = app.findChangeGrepOptions.properties;\n	app.findGrepPreferences = NothingEnum.NOTHING;\n	app.changeGrepPreferences = NothingEnum.NOTHING;\n	try {\n		app.findChangeGrepOptions.properties = ({includeFootnotes:true, kanaSensitive:true, widthSensitive:true});\n"
footer = "	} catch (e) {alert(e + ' at line ' + e.line)}\n	app.findChangeGrepOptions.properties = options;\n	app.findGrepPreferences = NothingEnum.NOTHING;\n	app.changeGrepPreferences = NothingEnum.NOTHING;\n	app.scriptPreferences.version = scriptVersion;\n};\n\nfunction getStyleByString(docOrGroup, string, property) {\n	if (string == '[No character style]') return docOrGroup[property][0];\n	if (string == '[No paragraph style]') return docOrGroup[property][0];\n	if (string == 'NormalParagraphStyle') return docOrGroup[property][1];\n	stringResult = string.match (/^(.*?[^\\]):(.*)$/);\n	var styleName = (stringResult) ? stringResult[1] : string;\n	styleName = styleName.replace (/\\:/g, ':');\n	remainingString = (stringResult) ? stringResult[2] : '';\n	var newProperty = (stringResult) ? property.replace(/s$/, '') + 'Groups' : property;\n	var styleOrGroup = docOrGroup[newProperty].itemByName(styleName);\n	if (remainingString.length > 0 && styleOrGroup.isValid) styleOrGroup = getStyleByString (styleOrGroup, remainingString, property);\n	return styleOrGroup;\n};\n"

ouf = codecs.EncodedFile(codecs.open('grep_ligatures.jsx', mode='wb'),'utf8')
ouf.write('\xEF\xBB\xBF') #adding BOM
ouf.write(header)
for lig in ligaturen:
   ouf.write('		app.findGrepPreferences.properties = ({findWhat:"%s"});\n' % (posix(lig[0])))
   ouf.write('		app.changeGrepPreferences.properties = ({changeTo:"%s", fillColor:"C=75 M=5 Y=100 K=0"});\n' % (lig[1]))
   ouf.write('		changeObject.changeGrep();\n')

ouf.write(footer)
ouf.close()
